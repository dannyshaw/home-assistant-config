schedy_heating:  # This is our app instance name.
  module: hass_apps_loader
  class: SchedyApp
  debug: true

  actor_type: thermostat

  expression_environment: |
    def working_from_home():
      return state("input_boolean.danny_working_from_home")

    def automations_global():
      return state("input_boolean.automations_global")

    def heating_schedule_enabled():
      return state("input_boolean.heating_schedule_enabled")

    def living_room_morning_heating():
      return state("input_boolean.living_room_morning_heating")

    def outside_temperature():
      return state("sensor.ferm_fridge_shed_temp")

    def sensor_unavailable(sensor):
      return sensor in state("sensor.unavailable_entities", "entities")

  rooms:

    adasroom:
      actors:
        climate.adas_room:
      schedule:
      - value: "OFF"
        # This will disable the heater if the temp sensor becomes unavailable to prevent overheating the room
        rules:
        - x: "Next() if sensor_unavailable('sensor.adas_room_temperature') else Break()"
        - v: "OFF"
      - value: "OFF"
        start: "06:00"
        end: "16:00"
      - value: 19
        rules:
        - { start: "19:00", end: "05:00" }
      - value: 20

    bedroom:
      actors:
        climate.master_bedroom:
      schedule:
      - value: "OFF"
        # This will disable the heater if the temp sensor becomes unavailable to prevent overheating the room
        rules:
        - x: "Next() if sensor_unavailable('sensor.master_bedroom_temperature') else Break()"
        - v: "OFF"
      - value: 21
        start: "05:00"
        end: "07:00"
      - value: 21
        start: "18:30"
        end: "20:30"
      - value: 19.5

    # livingroom:
    #   actors:
    #     climate.living_room:
    #   schedule:
    #   - value: 22
    #     rules:
    #     - x: "Next() if living_room_morning_heating() == 'on' and outside_temperature() < 16 else Break()"
    #     - { start: "05:45", end: "09:00" }


    # office:
    #   actors:
    #     climate.office:
    #   schedule:
    #   - v: 20
    #     rules:
    #     - weekdays: 1-5
    #       rules:
    #       - rules:
    #         - x: "Next() if working_from_home() == 'on' else Break()"
    #         - { start: "07:00", end: "16:00" }
    #   - v: "OFF"
    #     rules:
    #       - rules:
    #         - { start: "00:00", end: "06:00" }


  schedule_append:
  # this somehow gets processed in reverse. so the following will set all
  # schedules to default 20 degress and then off
  - v: "OFF"
  - v: 20



  schedule_prepend:
  - x: Next() if automations_global() == 'on' else "OFF"
  - x: Next() if heating_schedule_enabled() == 'on' else "OFF"


  watched_entities:
  - input_boolean.heating_schedule_enabled
  - input_boolean.automations_global
  - input_boolean.danny_working_from_home
  - input_boolean.living_room_morning_heating
  - sensor.unavailable_entities:entities
  - sensor.ferm_fridge_shed_temp
